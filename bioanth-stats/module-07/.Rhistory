knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
comment = "##",
prompt = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff = 75),
fig.path = "img/"
)
# this is a workaround, since the chunk above will not run
# properly (it won't add to the previous plot window)
# so... chunk above shows code only, and this chunk runs
# and redoes the plot, but shows output only, not this code
plot(c(0, 50), c(0, 15), type="n", xlab= "Sample size", ylab="Variance")
for (n in seq(5,50,5)) # samples of 5, 10, 15...
{
for(i in 1:50) 	# 50 replicates
{
x<- rnorm(n, mean=10 ,sd=2)
points(n,var(x))
}
}
install.packages("sciplot")
install.packages("manipulate")
?power.t.test
knitr::opts_chunk$set(
echo=TRUE,
warning=FALSE,
comment="##",
prompt=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=75),
fig.path="img/"
)
library(ggplot2)
library(manipulate)
power.test <- function(mu0,muA,sigma,alpha=0.05,type,alternative){
p <- 0
for (i in 2:200){
x <- power.t.test(n = i, delta = abs(muA-mu0), sd = sigma, sig.level = alpha, power = NULL, type=type, alternative=alternative)
p<-c(p,x$power)
}
d <-data.frame(cbind(1:200,p, 1-p))
critn <- 0
for (i in 1:199)
{
if (p[i] < 0.8 && p[i+1] >= 0.8) {critn <- i + 1} else {critn <- critn}
}
names(d) <- c("n","power", "beta")
g <- ggplot(data = d) + xlab("sample size n") + ylab("Type II Error Rate, Beta  (Red)\nand\nPower, 1-Beta (Blue)") + ggtitle("Power for T Tests\n(assuming equal n and variance across the two groups)") + ylim(0,1) + geom_point(aes(x=n, y=power),colour="blue", alpha=1/2) + geom_line(aes(x=n, y=power),colour="blue", alpha=1/2) + geom_line(aes(x=n,y=0.8), colour="red", lty=3) + geom_point(aes(x=n, y=beta),colour="red", alpha=1/2) + geom_line(aes(x=n,y=beta), colour="red", alpha=1/2) + geom_linerange(aes(x=critn,ymin=0,ymax=0.8), colour="blue", alpha=1/4) + annotate("text", x = 150, y = 0.5, label = paste("Effect Size = ",round(abs(mu0-muA)/sigma,digits=3),"\nCritical n = ", critn, sep=""))
print(g)
}
manipulate(power.test(mu0,muA,sigma,alpha,type,alternative),mu0=slider(-10,10,initial=3,step=1),muA=slider(-10,10,initial=0,step=1),sigma=slider(1, 10, initial=3,step=1), alpha=slider(0.01,0.10,initial=0.05,step=0.01),alternative=picker("two.sided","one.sided"),type=picker("two.sample","one.sample","paired"))
library(ggplot2)
library(manipulate)
power.plot <- function(sigma, muA, mu0, n, alpha, alternative="two.tailed"){
pow <- 0
z <- (muA-mu0)/(sigma/sqrt(n))
g <- ggplot(data.frame(mu = c(min(mu0-4*sigma/sqrt(n), muA-4*sigma/sqrt(n)),max(mu0+4*sigma/sqrt(n), muA+4*sigma/sqrt(n)))), aes(x = mu)) + ggtitle("Explore Power for Z Test")
g <- g + ylim(c(0,max(dnorm(mu0,mu0,sigma/sqrt(n))+0.1,dnorm(muA,muA,sigma/sqrt(n))+0.1)))
g <- g + stat_function(fun=dnorm, geom = "line", args = list(mean = mu0, sd = sigma / sqrt(n)), size = 1, col = "red", show.legend = TRUE)
g <- g + stat_function(fun=dnorm, geom = "line", args = list(mean = muA, sd = sigma / sqrt(n)), size = 1, col = "blue", show.legend = TRUE)
if (alternative=="greater"){
if (z>0){
xcrit = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(xcrit, seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), muA+4*sigma/sqrt(n)), y=c(0,dnorm(seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(muA+4*sigma/sqrt(n),muA,sigma/sqrt(n))-pnorm(xcrit,muA,sigma/sqrt(n))
}
}
if (alternative=="less"){
if (z<0){
xcrit = mu0 - qnorm(1 - alpha) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(muA-4*sigma/sqrt(n), seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), xcrit), y=c(0,dnorm(seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(xcrit,muA,sigma/sqrt(n))-pnorm(muA-4*sigma/sqrt(n),muA,sigma/sqrt(n))
}
}
if (alternative=="two.tailed"){
if (z>0){
xcrit = mu0 + qnorm(1 - alpha/2) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(xcrit, seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), muA+4*sigma/sqrt(n)), y=c(0,dnorm(seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(muA+4*sigma/sqrt(n),muA,sigma/sqrt(n))-pnorm(xcrit,muA,sigma/sqrt(n))
}
if (z<0){
xcrit = mu0 - qnorm(1 - alpha/2) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(muA-4*sigma/sqrt(n), seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), xcrit), y=c(0,dnorm(seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(xcrit,muA,sigma/sqrt(n))-pnorm(muA-4*sigma/sqrt(n),muA,sigma/sqrt(n))
}
}
g <- g + annotate("text", x=max(mu0,muA)+2*sigma/sqrt(n), y=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.075,dnorm(muA,muA,sigma/sqrt(n))+0.075), label = paste("Effect Size = ",round((muA-mu0)/sigma,digits=3),"\nPower = ",round(pow,digits=3),sep=""))
g <- g + annotate("text", x=min(mu0,muA)-2*sigma/sqrt(n),y=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.075,dnorm(muA,muA,sigma/sqrt(n))+0.075),label="Red = mu0\nBlue = muA")
g
}
manipulate(
power.plot(sigma, muA, mu0, n, alpha, alternative),
sigma = slider(1, 10, step = 1, initial = 4),
muA = slider(-10, 10, step = 1, initial = 2),
mu0 = slider(-10, 10, step = 1, initial = 0),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05),
alternative = picker("two.tailed","greater","less")
)
de.off()
dev.off()
dev.off()
library(ggplot2)
library(manipulate)
power.plot <- function(sigma, muA, mu0, n, alpha, alternative="two.tailed"){
pow <- 0
z <- (muA-mu0)/(sigma/sqrt(n))
g <- ggplot(data.frame(mu = c(min(mu0-4*sigma/sqrt(n), muA-4*sigma/sqrt(n)),max(mu0+4*sigma/sqrt(n), muA+4*sigma/sqrt(n)))), aes(x = mu)) + ggtitle("Explore Power for Z Test")
g <- g + ylim(c(0,max(dnorm(mu0,mu0,sigma/sqrt(n))+0.1,dnorm(muA,muA,sigma/sqrt(n))+0.1)))
g <- g + stat_function(fun=dnorm, geom = "line", args = list(mean = mu0, sd = sigma / sqrt(n)), size = 1, col = "red", show.legend = TRUE)
g <- g + stat_function(fun=dnorm, geom = "line", args = list(mean = muA, sd = sigma / sqrt(n)), size = 1, col = "blue", show.legend = TRUE)
if (alternative=="greater"){
if (z>0){
xcrit = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(xcrit, seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), muA+4*sigma/sqrt(n)), y=c(0,dnorm(seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(muA+4*sigma/sqrt(n),muA,sigma/sqrt(n))-pnorm(xcrit,muA,sigma/sqrt(n))
}
}
if (alternative=="less"){
if (z<0){
xcrit = mu0 - qnorm(1 - alpha) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(muA-4*sigma/sqrt(n), seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), xcrit), y=c(0,dnorm(seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(xcrit,muA,sigma/sqrt(n))-pnorm(muA-4*sigma/sqrt(n),muA,sigma/sqrt(n))
}
}
if (alternative=="two.tailed"){
if (z>0){
xcrit = mu0 + qnorm(1 - alpha/2) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(xcrit, seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), muA+4*sigma/sqrt(n)), y=c(0,dnorm(seq(from=xcrit, to=muA+4*sigma/sqrt(n), length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(muA+4*sigma/sqrt(n),muA,sigma/sqrt(n))-pnorm(xcrit,muA,sigma/sqrt(n))
}
if (z<0){
xcrit = mu0 - qnorm(1 - alpha/2) * sigma / sqrt(n)
g <- g + geom_segment(x=xcrit,y=0, xend=xcrit, yend=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.025,dnorm(muA,muA,sigma/sqrt(n))+0.025), size = 0.5, linetype=3)
g <- g + geom_polygon(data=data.frame(cbind(x=c(muA-4*sigma/sqrt(n), seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), xcrit), y=c(0,dnorm(seq(from=muA-4*sigma/sqrt(n), to=xcrit, length.out=100), mean=muA,sd=sigma/sqrt(n)),0))),aes(x=x,y=y),fill="blue",alpha=0.5)
pow <- pnorm(xcrit,muA,sigma/sqrt(n))-pnorm(muA-4*sigma/sqrt(n),muA,sigma/sqrt(n))
}
}
g <- g + annotate("text", x=max(mu0,muA)+2*sigma/sqrt(n), y=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.075,dnorm(muA,muA,sigma/sqrt(n))+0.075), label = paste("Effect Size = ",round((muA-mu0)/sigma,digits=3),"\nPower = ",round(pow,digits=3),sep=""))
g <- g + annotate("text", x=min(mu0,muA)-2*sigma/sqrt(n),y=max(dnorm(mu0,mu0,sigma/sqrt(n))+0.075,dnorm(muA,muA,sigma/sqrt(n))+0.075),label="Red = mu0\nBlue = muA")
g
}
manipulate(
power.plot(sigma, muA, mu0, n, alpha, alternative),
sigma = slider(1, 10, step = 1, initial = 4),
muA = slider(-10, 10, step = 1, initial = 2),
mu0 = slider(-10, 10, step = 1, initial = 0),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05),
alternative = picker("two.tailed","greater","less")
)
knitr::opts_chunk$set(
echo=TRUE,
warning=FALSE,
comment="##",
prompt=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=75),
fig.path="img/"
)
library(curl)
library(ggplot2)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall17/zombies.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
plot(data=d,height~weight)
library(curl)
library(ggplot2)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall17/zombies.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
plot(data=d,height~weight)
w <- d$weight
h <- d$height
n <- length(w) # or length(h)
cov_wh <- sum((w-mean(w))*(h-mean(h)))/(n-1)
cov_wh
cov(w,h)
sd_w <- sd(w)
sd_h <- sd(h)
cor_wh <- cov_wh/(sd_w*sd_h)
cor_wh
cor(w, h)
cor(w, h, method="pearson")
cor(w, h, method="kendall")
cor(w, h, method="kendall")
cor(w, h, method="spearman")
y <- h - mean(h)
x <- w - mean(w)
z <- data.frame(cbind(x,y))
g <- ggplot(data=z, aes(x = x, y = y)) + geom_point()
g
slope.test <- function(beta1){
g <- ggplot(data=z, aes(x = x, y = y))
g <- g + geom_point()
g <- g + geom_abline(intercept = 0, slope = beta1, size = 1, colour="blue", alpha=1/2)
ols <- sum((y - beta1 * x) ^2)
g <- g + ggtitle(paste("Slope = ", beta1, "\nSum of Squared Deviations = ", round(ols, 3)))
g
}
manipulate(slope.test(beta1), beta1 = slider(-1, 1, initial = 0, step = 0.005))
beta1 <- cor(w,h) * (sd(h)/sd(w))
beta1
beta1 <- cov(w,h) / var(w)
beta1
beta1 <- sum((h-mean(h))*(w-mean(w)))/sum((w-mean(w))^2)
beta1
beta0 <- mean(h) - beta1*mean(w)
beta0
m <- lm(height~weight, data=d)
m
names(m)
m$coefficients
head(m$model)
g <- ggplot(data=d, aes(x = weight, y = height))
g <- g + geom_point()
g <- g + geom_smooth(method="lm", formula=y~x)
g
library(lmodel2) # load the lmodel2 package
# Run the regression
mII <- lmodel2(height~weight, data=d, range.y = "relative", range.x="relative", nperm=1000)
mII
plot(mII, "OLS")
plot(mII, "RMA")
plot(mII, "SMA")
plot(mII, "MA")
install.packages("lmodel2")
library(lmodel2) # load the lmodel2 package
# Run the regression
mII <- lmodel2(height~weight, data=d, range.y = "relative", range.x="relative", nperm=1000)
mII
plot(mII, "OLS")
plot(mII, "RMA")
plot(mII, "SMA")
plot(mII, "MA")
mI <- lm(height~weight, data=d)
summary(mI)
par(mfrow=c(1,2))
plot(mII, main="lmodel2() OLS")
plot(data=d, height~weight, main="lm()")
abline(mI)
plot(data=d, height~age)
head(d)
beta1 <- cor(d$height,d$age)*sd(d$height)/sd(d$age)
beta1
beta0 <- mean(d$height) - beta1*mean(d$age)
beta0
m <- lm(height~age, data=d)
m
plot(m))
plot(m)
plot(data=d, height~age)
dev.off()
plot(data=d, height~age)
m <- lm(data=d,height~weight)
summary(m)
t <- coef(summary(m))
t <- data.frame(unlist(t))
colnames(t) <- c("Est", "SE", "t","p")
t
t$calct <- (t$Est-0)/t$SE
t$calcp <- 2 * pt(t$calct, df=998, lower.tail = FALSE) # x2 because is 2-tailed test
t
t$lower <- t$Est - qt(0.975, df=998)*t$SE
t$upper <- t$Est + qt(0.975, df=998)*t$SE
ci <- c(t$lower, t$upper) # by hand
ci
ci <- confint(m,level=0.95) # using the results of lm()
ci
beta0 <-t$Est[1]
beta1 <-t$Est[2]
h_hat <- beta1 * 150 + beta0
h_hat
h_hat_difference <- (beta1 * 220 + beta0) - (beta1 * 180 + beta0)
h_hat_difference
m <- lm(data=d,height~weight)
h_hat <- predict(m, newdata=data.frame(weight=d$weight))
df <- data.frame(cbind(d$weight,d$height,h_hat))
names(df) <- c("x","y","yhat")
head(df)
g <- ggplot(data=df,aes(x=x,y=yhat))
g <- g + geom_point()
g <- g + geom_point(aes(x=x,y=y),colour="red")
g <- g + geom_segment(aes(x=x, y=yhat, xend=x, yend=y))
g
ci <- predict(m,newdata=data.frame(weight=150), interval="confidence",level=0.95) # for a single value
ci
ci <- predict(m,newdata=data.frame(weight=d$weight), interval="confidence",level=0.95) # for a vector of values
head(ci)
df <- cbind(df,ci)
names(df) <- c("x","y","yhat","CIfit","CIlwr","CIupr")
head(df)
g <- ggplot(data=df,aes(x=x,y=y))
g <- g + geom_point(alpha=1/2)
g <- g + geom_line(aes(x=x, y=CIfit), colour = "black")
g <- g + geom_line(aes(x=x, y=CIlwr), colour = "blue")
g <- g + geom_line(aes(x=x, y=CIupr), colour = "blue")
g
pi <- predict(m,newdata=data.frame(weight=150), interval="prediction",level=0.95) # for a single value
pi
pi <- predict(m,newdata=data.frame(weight=d$weight), interval="prediction",level=0.95) # for a vector of values
head(pi)
df <- cbind(df,pi)
names(df) <- c("x","y","yhat","CIfit","CIlwr","CIupr","PIfit","PIlwr","PIupr")
head(df)
g <- g + geom_line(data=df,aes(x=x, y=PIlwr), colour = "red")
g <- g + geom_line(data=df,aes(x=x, y=PIupr), colour = "red")
g
v <- seq(from=10, to=30, by=1)
m <- lm(data=d,height~age)
ci <- predict(m,newdata=data.frame(age=v), interval="confidence",level=0.95)
pi <- predict(m,newdata=data.frame(age=v), interval="prediction",level=0.95)
plot(data=d, height~age)
lines(x=v,y=ci[,1], col="black")
lines(x=v,y=ci[,2], col="blue")
lines(x=v,y=ci[,3], col="blue")
lines(x=v,y=pi[,2], col="red")
lines(x=v,y=pi[,3], col="red")
#or
require(gridExtra)
require(ggplot2)
df <- data.frame(cbind(v,ci,pi))
names(df) <- c("age","CIfit","CIlwr","CIupr","PIfit","PIlwr","PIupr")
head(df)
g1 <- ggplot(data=d, aes(x = age, y = height))
g1 <- g1 + geom_point(alpha=1/2)
g1 <- g1 + geom_line(data=df,aes(x=v,y=CIfit),colour="black",lwd=1)
g1 <- g1 + geom_line(data=df,aes(x=v,y=CIlwr),colour="blue")
g1 <- g1 + geom_line(data=df,aes(x=v,y=CIupr),colour="blue")
g1 <- g1 + geom_line(data=df,aes(x=v,y=PIlwr),colour="red")
g1 <- g1 + geom_line(data=df,aes(x=v,y=PIupr),colour="red")
g2 <- ggplot(data=d, aes(x = age, y = height))
g2 <- g2 + geom_point(alpha=1/2)
g2 <- g2 + geom_smooth(method="lm", formula=y~x)
grid.arrange(g1, g2, ncol=2)
knitr::opts_chunk$set(
echo=TRUE,
warning=FALSE,
comment="##",
prompt=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=75),
fig.path="img/"
)
library(curl)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall17/zombies.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
m <- lm(data=d,height~weight)
SSY <- sum((m$model$height-mean(m$model$height))^2) # height - mean(height)
SSY
SSR <- sum((m$fitted.values-mean(m$model$height))^2) # predicted height - mean height
SSR
SSE <- sum((m$model$height-m$fitted.values)^2) # height - predicted height
SSE
df_regression <- 1
df_error <- 998
df_y <- 999
MSR <- SSR/df_regression
MSE <- SSE/df_error
MSY <- SSY/df_y
fratio <- MSR/MSE
fratio
curve(df(x,df=1,df2=1), col="green", lty=3, lwd=2, xlim=c(0,10), main="Some Example F Distributions\n(vertical line shows critical value for df1=1,df2=998)", ylab="f(x)", xlab="x")
curve(df(x,df=2,df2=2), col="blue", lty=3, lwd=2, add=TRUE)
curve(df(x,df=4,df2=4), col="red", lty=3, lwd=2, add=TRUE)
curve(df(x,df=8,df2=6), col="purple", lty=3, lwd=2, add=TRUE)
curve(df(x,df=1,df2=998), col="black", lwd=3, add=TRUE)
legend("top", c("df1=1,df2=1","df1=2,df2=2","df1=4,df2=4","df1=8,df2=6","df1=1,df2=998"), lty=3, lwd=2, col=c("green", "blue", "red","purple","black"), bty='n', cex=.75)
fcrit <- qf(p=0.95,df1=1,df2=998)
fcrit
abline(v=fcrit)
abline(h=0)
polygon(cbind(c(fcrit,seq(from=fcrit, to=10, length.out=1000), 8), c(0,df(seq(from=fcrit, to=8, length.out=1000),df1=1,df2=998),0)), border="black",col="grey")
1-pf(q=fratio,df1=1,df2=998)
a <- aov(data=d,height~weight)
summary(a)
summary.aov(m)
rsquared <- SSR/SSY
rsquared
rho <- sqrt(rsquared)
rho
SSX <- sum((m$model$weight-mean(m$model$weight))^2)
SEbeta1 <- sqrt(MSE/SSX)
SEbeta1
SEbeta0 <- sqrt((MSE*sum(m$model$weight^2))/(1000*SSX))
SEbeta0
SEyhat <- sqrt(MSE*(1/1000+(m$model$weight-mean(m$model$weight))^2/SSX))
head(SEyhat) # just the first 6 rows
summary(m)
m <- lm(data=d,height~weight)
plot(x=d$weight,y=m$residuals)
# or
e <- resid(m)
plot(x=d$weight,y=e)
hist(e, xlim=c(-4*sd(e),4*sd(e)),breaks=20, main="Histogram of Residuals")
plot(m$model$weight,m$residuals)
par(mfrow=c(2,2))
plot(m)
qqnorm(m$residuals)
s <- shapiro.test(m$residuals)
s
d$logWeaningAge <- log(d$WeaningAge_d)
d$logFemaleBodyMass <- log(d$Body_mass_female_mean)
plot(data=d,logWeaningAge~logFemaleBodyMass)
model<-lm(data=d,logWeaningAge~logFemaleBodyMass)
summary(model)
plot(model)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall17/KamilarAndCooperData.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
plot(data=d,WeaningAge_d~Body_mass_female_mean)
model<-lm(data=d,WeaningAge_d~Body_mass_female_mean)
summary(model)
plot(model)
qqnorm(model$residuals)
s <- shapiro.test(model$residuals)
s
d$logWeaningAge <- log(d$WeaningAge_d)
d$logFemaleBodyMass <- log(d$Body_mass_female_mean)
plot(data=d,logWeaningAge~logFemaleBodyMass)
model<-lm(data=d,logWeaningAge~logFemaleBodyMass)
summary(model)
plot(model)
par(mfrow = c(1,2))
a <- 2
b <- 2
# log x
x <- seq(from=0, to=100, length.out=1000)
y <- a + b * log(x)
plot(x,y, type="l",main="untransformed")
plot(log(x),y, type="l",main="log(x)")
# log y
x <- seq(from=0, to=10, length.out=1000)
y <- exp(a + b *x)
plot(x,y, type="l",main="untransformed")
plot(x,log(y), type="l",main="log(y)")
# assymptotic
x <- seq(from=1,to=100,length.out=100)
y <- (a * x) / (1 + b*x)
plot(x,y, type="l",main="untransformed")
plot(1/x, y, type="l",main="1/x")
# reciprocal
x <- seq(from=1,to=100,length.out=100)
y <- a + b/x
plot(x,y, type="l",main="untransformed")
plot(1/x,y, type="l",main="1/x")
# power
x <- seq(from=1,to=100,length.out=100)
y <- a * x^b
plot(x,y, type="l",main="untransformed")
plot(x^b, y, type="l",main="x^b")
# exp
x <- seq(from=1,to=10,length.out=100)
y <- a * exp(b*x)
plot(x,y, type="l",main="untransformed")
plot(x,log(y), type="l",main="log(y)")
qqnorm(m$residuals)
s <- shapiro.test(m$residuals)
s
library(car)
qqPlot(m$residuals)
s <- shapiro.test(m$residuals)
s
